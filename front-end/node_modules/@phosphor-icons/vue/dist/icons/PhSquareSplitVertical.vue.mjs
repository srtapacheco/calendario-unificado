import { defineComponent as v, inject as n, computed as i, openBlock as t, createElementBlock as e, mergeProps as V, renderSlot as m, createCommentVNode as g, createElementVNode as o } from "vue";
const A = ["width", "height", "fill", "transform"], Z = { key: 0 }, y = /* @__PURE__ */ o("path", { d: "M200,36H56A20,20,0,0,0,36,56V200a20,20,0,0,0,20,20H200a20,20,0,0,0,20-20V56A20,20,0,0,0,200,36Zm-4,24v56H60V60ZM60,196V140H196v56Z" }, null, -1), M = [
  y
], f = { key: 1 }, w = /* @__PURE__ */ o("path", {
  d: "M208,56V200a8,8,0,0,1-8,8H56a8,8,0,0,1-8-8V56a8,8,0,0,1,8-8H200A8,8,0,0,1,208,56Z",
  opacity: "0.2"
}, null, -1), k = /* @__PURE__ */ o("path", { d: "M200,40H56A16,16,0,0,0,40,56V200a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V56A16,16,0,0,0,200,40Zm0,16v64H56V56Zm0,144H56V136H200v64Z" }, null, -1), S = [
  w,
  k
], x = { key: 2 }, z = /* @__PURE__ */ o("path", { d: "M216,56v60a4,4,0,0,1-4,4H44a4,4,0,0,1-4-4V56A16,16,0,0,1,56,40H200A16,16,0,0,1,216,56Zm-4,80H44a4,4,0,0,0-4,4v60a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V140A4,4,0,0,0,212,136Z" }, null, -1), C = [
  z
], B = { key: 3 }, N = /* @__PURE__ */ o("path", { d: "M200,42H56A14,14,0,0,0,42,56V200a14,14,0,0,0,14,14H200a14,14,0,0,0,14-14V56A14,14,0,0,0,200,42ZM56,54H200a2,2,0,0,1,2,2v66H54V56A2,2,0,0,1,56,54ZM200,202H56a2,2,0,0,1-2-2V134H202v66A2,2,0,0,1,200,202Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ o("path", { d: "M200,40H56A16,16,0,0,0,40,56V200a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V56A16,16,0,0,0,200,40Zm0,16v64H56V56Zm0,144H56V136H200v64Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M200,44H56A12,12,0,0,0,44,56V200a12,12,0,0,0,12,12H200a12,12,0,0,0,12-12V56A12,12,0,0,0,200,44ZM56,52H200a4,4,0,0,1,4,4v68H52V56A4,4,0,0,1,56,52ZM200,204H56a4,4,0,0,1-4-4V132H204v68A4,4,0,0,1,200,204Z" }, null, -1), q = [
  j
], D = {
  name: "PhSquareSplitVertical"
}, I = /* @__PURE__ */ v({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const a = c, d = n("weight", "regular"), _ = n("size", "1em"), h = n("color", "currentColor"), H = n("mirrored", !1), s = i(() => a.weight ?? d), l = i(() => a.size ?? _), u = i(() => a.color ?? h), p = i(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : H ? "scale(-1, 1)" : void 0);
    return (r, F) => (t(), e("svg", V({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: l.value,
      height: l.value,
      fill: u.value,
      transform: p.value
    }, r.$attrs), [
      m(r.$slots, "default"),
      s.value === "bold" ? (t(), e("g", Z, M)) : s.value === "duotone" ? (t(), e("g", f, S)) : s.value === "fill" ? (t(), e("g", x, C)) : s.value === "light" ? (t(), e("g", B, b)) : s.value === "regular" ? (t(), e("g", E, W)) : s.value === "thin" ? (t(), e("g", $, q)) : g("", !0)
    ], 16, A));
  }
});
export {
  I as default
};
