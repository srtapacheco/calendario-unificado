import { defineComponent as m, inject as a, computed as l, openBlock as t, createElementBlock as e, mergeProps as v, renderSlot as y, createCommentVNode as f, createElementVNode as o } from "vue";
const w = ["width", "height", "fill", "transform"], H = { key: 0 }, M = /* @__PURE__ */ o("path", { d: "M200.49,72.48,93,180h75a12,12,0,0,1,0,24H64a12,12,0,0,1-12-12V88a12,12,0,0,1,24,0v75L183.51,55.51a12,12,0,0,1,17,17Z" }, null, -1), V = [
  M
], L = { key: 1 }, k = /* @__PURE__ */ o("path", {
  d: "M168,192H64V88Z",
  opacity: "0.2"
}, null, -1), Z = /* @__PURE__ */ o("path", { d: "M197.66,58.34a8,8,0,0,0-11.32,0L116,128.69,69.66,82.34A8,8,0,0,0,56,88V192a8,8,0,0,0,8,8H168a8,8,0,0,0,5.66-13.66L127.31,140l70.35-70.34A8,8,0,0,0,197.66,58.34ZM72,184V107.31l38.34,38.34h0L148.69,184Z" }, null, -1), x = [
  k,
  Z
], S = { key: 2 }, z = /* @__PURE__ */ o("path", { d: "M197.66,69.66,127.31,140l46.35,46.34A8,8,0,0,1,168,200H64a8,8,0,0,1-8-8V88a8,8,0,0,1,13.66-5.66L116,128.69l70.34-70.35a8,8,0,0,1,11.32,11.32Z" }, null, -1), C = [
  z
], A = { key: 3 }, B = /* @__PURE__ */ o("path", { d: "M196.24,68.24,78.48,186H168a6,6,0,0,1,0,12H64a6,6,0,0,1-6-6V88a6,6,0,0,1,12,0v89.52L187.76,59.76a6,6,0,0,1,8.48,8.48Z" }, null, -1), N = [
  B
], b = { key: 4 }, E = /* @__PURE__ */ o("path", { d: "M197.66,69.66,83.31,184H168a8,8,0,0,1,0,16H64a8,8,0,0,1-8-8V88a8,8,0,0,1,16,0v84.69L186.34,58.34a8,8,0,0,1,11.32,11.32Z" }, null, -1), P = [
  E
], W = { key: 5 }, $ = /* @__PURE__ */ o("path", { d: "M194.83,66.83,73.66,188H168a4,4,0,0,1,0,8H64a4,4,0,0,1-4-4V88a4,4,0,0,1,8,0v94.34L189.17,61.17a4,4,0,1,1,5.66,5.66Z" }, null, -1), j = [
  $
], D = {
  name: "PhArrowDownLeft"
}, G = /* @__PURE__ */ m({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const n = d, c = a("weight", "regular"), _ = a("size", "1em"), h = a("color", "currentColor"), u = a("mirrored", !1), s = l(() => n.weight ?? c), i = l(() => n.size ?? _), p = l(() => n.color ?? h), g = l(() => n.mirrored !== void 0 ? n.mirrored ? "scale(-1, 1)" : void 0 : u ? "scale(-1, 1)" : void 0);
    return (r, q) => (t(), e("svg", v({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: i.value,
      height: i.value,
      fill: p.value,
      transform: g.value
    }, r.$attrs), [
      y(r.$slots, "default"),
      s.value === "bold" ? (t(), e("g", H, V)) : s.value === "duotone" ? (t(), e("g", L, x)) : s.value === "fill" ? (t(), e("g", S, C)) : s.value === "light" ? (t(), e("g", A, N)) : s.value === "regular" ? (t(), e("g", b, P)) : s.value === "thin" ? (t(), e("g", W, j)) : f("", !0)
    ], 16, w));
  }
});
export {
  G as default
};
