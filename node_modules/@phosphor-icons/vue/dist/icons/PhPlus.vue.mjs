import { defineComponent as g, inject as n, computed as i, openBlock as t, createElementBlock as e, mergeProps as m, renderSlot as V, createCommentVNode as H, createElementVNode as o } from "vue";
const y = ["width", "height", "fill", "transform"], f = { key: 0 }, w = /* @__PURE__ */ o("path", { d: "M228,128a12,12,0,0,1-12,12H140v76a12,12,0,0,1-24,0V140H40a12,12,0,0,1,0-24h76V40a12,12,0,0,1,24,0v76h76A12,12,0,0,1,228,128Z" }, null, -1), M = [
  w
], k = { key: 1 }, A = /* @__PURE__ */ o("path", {
  d: "M216,48V208a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208A8,8,0,0,1,216,48Z",
  opacity: "0.2"
}, null, -1), Z = /* @__PURE__ */ o("path", { d: "M224,128a8,8,0,0,1-8,8H136v80a8,8,0,0,1-16,0V136H40a8,8,0,0,1,0-16h80V40a8,8,0,0,1,16,0v80h80A8,8,0,0,1,224,128Z" }, null, -1), x = [
  A,
  Z
], S = { key: 2 }, z = /* @__PURE__ */ o("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM184,136H136v48a8,8,0,0,1-16,0V136H72a8,8,0,0,1,0-16h48V72a8,8,0,0,1,16,0v48h48a8,8,0,0,1,0,16Z" }, null, -1), C = [
  z
], B = { key: 3 }, N = /* @__PURE__ */ o("path", { d: "M222,128a6,6,0,0,1-6,6H134v82a6,6,0,0,1-12,0V134H40a6,6,0,0,1,0-12h82V40a6,6,0,0,1,12,0v82h82A6,6,0,0,1,222,128Z" }, null, -1), P = [
  N
], b = { key: 4 }, E = /* @__PURE__ */ o("path", { d: "M224,128a8,8,0,0,1-8,8H136v80a8,8,0,0,1-16,0V136H40a8,8,0,0,1,0-16h80V40a8,8,0,0,1,16,0v80h80A8,8,0,0,1,224,128Z" }, null, -1), W = [
  E
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M220,128a4,4,0,0,1-4,4H132v84a4,4,0,0,1-8,0V132H40a4,4,0,0,1,0-8h84V40a4,4,0,0,1,8,0v84h84A4,4,0,0,1,220,128Z" }, null, -1), q = [
  j
], D = {
  name: "PhPlus"
}, I = /* @__PURE__ */ g({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(h) {
    const a = h, d = n("weight", "regular"), c = n("size", "1em"), _ = n("color", "currentColor"), u = n("mirrored", !1), s = i(() => a.weight ?? d), l = i(() => a.size ?? c), p = i(() => a.color ?? _), v = i(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : u ? "scale(-1, 1)" : void 0);
    return (r, F) => (t(), e("svg", m({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: l.value,
      height: l.value,
      fill: p.value,
      transform: v.value
    }, r.$attrs), [
      V(r.$slots, "default"),
      s.value === "bold" ? (t(), e("g", f, M)) : s.value === "duotone" ? (t(), e("g", k, x)) : s.value === "fill" ? (t(), e("g", S, C)) : s.value === "light" ? (t(), e("g", B, P)) : s.value === "regular" ? (t(), e("g", b, W)) : s.value === "thin" ? (t(), e("g", $, q)) : H("", !0)
    ], 16, y));
  }
});
export {
  I as default
};
