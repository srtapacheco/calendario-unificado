import { defineComponent as p, inject as i, computed as r, openBlock as t, createElementBlock as e, mergeProps as m, renderSlot as g, createCommentVNode as v, createElementVNode as o } from "vue";
const Z = ["width", "height", "fill", "transform"], A = { key: 0 }, y = /* @__PURE__ */ o("path", { d: "M216,36H40A20,20,0,0,0,20,56V200a20,20,0,0,0,20,20H216a20,20,0,0,0,20-20V56A20,20,0,0,0,216,36Zm-4,24V84H44V60ZM44,196V108H212v88Z" }, null, -1), M = [
  y
], f = { key: 1 }, w = /* @__PURE__ */ o("path", {
  d: "M224,56V96H32V56a8,8,0,0,1,8-8H216A8,8,0,0,1,224,56Z",
  opacity: "0.2"
}, null, -1), k = /* @__PURE__ */ o("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm0,16V88H40V56Zm0,144H40V104H216v96Z" }, null, -1), x = [
  w,
  k
], S = { key: 2 }, z = /* @__PURE__ */ o("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm0,16V88H40V56Z" }, null, -1), B = [
  z
], C = { key: 3 }, N = /* @__PURE__ */ o("path", { d: "M216,42H40A14,14,0,0,0,26,56V200a14,14,0,0,0,14,14H216a14,14,0,0,0,14-14V56A14,14,0,0,0,216,42ZM40,54H216a2,2,0,0,1,2,2V90H38V56A2,2,0,0,1,40,54ZM216,202H40a2,2,0,0,1-2-2V102H218v98A2,2,0,0,1,216,202Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ o("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm0,16V88H40V56Zm0,144H40V104H216v96Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M216,44H40A12,12,0,0,0,28,56V200a12,12,0,0,0,12,12H216a12,12,0,0,0,12-12V56A12,12,0,0,0,216,44ZM40,52H216a4,4,0,0,1,4,4V92H36V56A4,4,0,0,1,40,52ZM216,204H40a4,4,0,0,1-4-4V100H220V200A4,4,0,0,1,216,204Z" }, null, -1), q = [
  j
], D = {
  name: "PhBrowser"
}, I = /* @__PURE__ */ p({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const n = d, c = i("weight", "regular"), _ = i("size", "1em"), h = i("color", "currentColor"), V = i("mirrored", !1), s = r(() => n.weight ?? c), a = r(() => n.size ?? _), H = r(() => n.color ?? h), u = r(() => n.mirrored !== void 0 ? n.mirrored ? "scale(-1, 1)" : void 0 : V ? "scale(-1, 1)" : void 0);
    return (l, F) => (t(), e("svg", m({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: a.value,
      height: a.value,
      fill: H.value,
      transform: u.value
    }, l.$attrs), [
      g(l.$slots, "default"),
      s.value === "bold" ? (t(), e("g", A, M)) : s.value === "duotone" ? (t(), e("g", f, x)) : s.value === "fill" ? (t(), e("g", S, B)) : s.value === "light" ? (t(), e("g", C, b)) : s.value === "regular" ? (t(), e("g", E, W)) : s.value === "thin" ? (t(), e("g", $, q)) : v("", !0)
    ], 16, Z));
  }
});
export {
  I as default
};
