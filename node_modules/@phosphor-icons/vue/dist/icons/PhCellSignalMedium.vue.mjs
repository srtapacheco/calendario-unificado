import { defineComponent as g, inject as n, computed as l, openBlock as t, createElementBlock as e, mergeProps as m, renderSlot as M, createCommentVNode as Z, createElementVNode as o } from "vue";
const y = ["width", "height", "fill", "transform"], V = { key: 0 }, f = /* @__PURE__ */ o("path", { d: "M132,112v88a12,12,0,0,1-24,0V112a12,12,0,0,1,24,0ZM80,140a12,12,0,0,0-12,12v48a12,12,0,0,0,24,0V152A12,12,0,0,0,80,140ZM40,180a12,12,0,0,0-12,12v8a12,12,0,0,0,24,0v-8A12,12,0,0,0,40,180Z" }, null, -1), A = [
  f
], w = { key: 1 }, k = /* @__PURE__ */ o("path", {
  d: "M120,100.7V208H32a8,8,0,0,1-5.66-13.66Z",
  opacity: "0.2"
}, null, -1), S = /* @__PURE__ */ o("path", { d: "M198.12,25.23a16,16,0,0,0-17.44,3.46l-160,160A16,16,0,0,0,32,216H192a16,16,0,0,0,16-16V40A15.94,15.94,0,0,0,198.12,25.23ZM112,120v80H32Zm80,80H128V104l64-64Z" }, null, -1), x = [
  k,
  S
], C = { key: 2 }, H = /* @__PURE__ */ o("path", { d: "M198.12,25.23a16,16,0,0,0-17.44,3.46l-160,160A16,16,0,0,0,32,216H192a16,16,0,0,0,16-16V40A15.94,15.94,0,0,0,198.12,25.23ZM192,200H128V104l64-64Z" }, null, -1), z = [
  H
], B = { key: 3 }, N = /* @__PURE__ */ o("path", { d: "M126,112v88a6,6,0,0,1-12,0V112a6,6,0,0,1,12,0ZM80,146a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V152A6,6,0,0,0,80,146ZM40,186a6,6,0,0,0-6,6v8a6,6,0,0,0,12,0v-8A6,6,0,0,0,40,186Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ o("path", { d: "M128,112v88a8,8,0,0,1-16,0V112a8,8,0,0,1,16,0ZM80,144a8,8,0,0,0-8,8v48a8,8,0,0,0,16,0V152A8,8,0,0,0,80,144ZM40,184a8,8,0,0,0-8,8v8a8,8,0,0,0,16,0v-8A8,8,0,0,0,40,184Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M124,112v88a4,4,0,0,1-8,0V112a4,4,0,0,1,8,0ZM80,148a4,4,0,0,0-4,4v48a4,4,0,0,0,8,0V152A4,4,0,0,0,80,148ZM40,188a4,4,0,0,0-4,4v8a4,4,0,0,0,8,0v-8A4,4,0,0,0,40,188Z" }, null, -1), q = [
  j
], D = {
  name: "PhCellSignalMedium"
}, I = /* @__PURE__ */ g({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const a = d, c = n("weight", "regular"), _ = n("size", "1em"), h = n("color", "currentColor"), v = n("mirrored", !1), s = l(() => a.weight ?? c), i = l(() => a.size ?? _), u = l(() => a.color ?? h), p = l(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : v ? "scale(-1, 1)" : void 0);
    return (r, F) => (t(), e("svg", m({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: i.value,
      height: i.value,
      fill: u.value,
      transform: p.value
    }, r.$attrs), [
      M(r.$slots, "default"),
      s.value === "bold" ? (t(), e("g", V, A)) : s.value === "duotone" ? (t(), e("g", w, x)) : s.value === "fill" ? (t(), e("g", C, z)) : s.value === "light" ? (t(), e("g", B, b)) : s.value === "regular" ? (t(), e("g", E, W)) : s.value === "thin" ? (t(), e("g", $, q)) : Z("", !0)
    ], 16, y));
  }
});
export {
  I as default
};
