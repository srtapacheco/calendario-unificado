import { defineComponent as g, inject as n, computed as a, openBlock as t, createElementBlock as e, mergeProps as v, renderSlot as y, createCommentVNode as f, createElementVNode as o } from "vue";
const Z = ["width", "height", "fill", "transform"], w = { key: 0 }, M = /* @__PURE__ */ o("path", { d: "M216.49,136.49l-80,80a12,12,0,1,1-17-17l80-80a12,12,0,1,1,17,17Zm-16-105a12,12,0,0,0-17,0l-152,152a12,12,0,0,0,17,17l152-152A12,12,0,0,0,200.49,31.51Z" }, null, -1), k = [
  M
], A = { key: 1 }, x = /* @__PURE__ */ o("path", {
  d: "M192,40V192H40Z",
  opacity: "0.2"
}, null, -1), S = /* @__PURE__ */ o("path", { d: "M195.06,32.61a8,8,0,0,0-8.72,1.73l-152,152A8,8,0,0,0,40,200H192a8,8,0,0,0,8-8V40A8,8,0,0,0,195.06,32.61ZM184,184H59.31L184,59.31Z" }, null, -1), z = [
  x,
  S
], C = { key: 2 }, V = /* @__PURE__ */ o("path", { d: "M200,40V192a8,8,0,0,1-8,8H40a8,8,0,0,1-5.66-13.66l152-152A8,8,0,0,1,200,40Z" }, null, -1), B = [
  V
], H = { key: 3 }, N = /* @__PURE__ */ o("path", { d: "M212.24,132.24l-80,80a6,6,0,1,1-8.48-8.48l80-80a6,6,0,1,1,8.48,8.48Zm-16-96.48a6,6,0,0,0-8.48,0l-152,152a6,6,0,1,0,8.48,8.48l152-152A6,6,0,0,0,196.24,35.76Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ o("path", { d: "M213.66,133.66l-80,80a8,8,0,0,1-11.32-11.32l80-80a8,8,0,0,1,11.32,11.32Zm-16-99.32a8,8,0,0,0-11.32,0l-152,152a8,8,0,0,0,11.32,11.32l152-152A8,8,0,0,0,197.66,34.34Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M210.83,130.83l-80,80a4,4,0,1,1-5.66-5.66l80-80a4,4,0,1,1,5.66,5.66Zm-16-93.66a4,4,0,0,0-5.66,0l-152,152a4,4,0,0,0,5.66,5.66l152-152A4,4,0,0,0,194.83,37.17Z" }, null, -1), L = [
  j
], q = {
  name: "PhNotches"
}, G = /* @__PURE__ */ g({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const s = c, d = n("weight", "regular"), _ = n("size", "1em"), h = n("color", "currentColor"), u = n("mirrored", !1), l = a(() => s.weight ?? d), i = a(() => s.size ?? _), p = a(() => s.color ?? h), m = a(() => s.mirrored !== void 0 ? s.mirrored ? "scale(-1, 1)" : void 0 : u ? "scale(-1, 1)" : void 0);
    return (r, D) => (t(), e("svg", v({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: i.value,
      height: i.value,
      fill: p.value,
      transform: m.value
    }, r.$attrs), [
      y(r.$slots, "default"),
      l.value === "bold" ? (t(), e("g", w, k)) : l.value === "duotone" ? (t(), e("g", A, z)) : l.value === "fill" ? (t(), e("g", C, B)) : l.value === "light" ? (t(), e("g", H, b)) : l.value === "regular" ? (t(), e("g", E, W)) : l.value === "thin" ? (t(), e("g", $, L)) : f("", !0)
    ], 16, Z));
  }
});
export {
  G as default
};
