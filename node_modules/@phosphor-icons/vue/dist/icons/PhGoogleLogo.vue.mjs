import { defineComponent as m, inject as i, computed as l, openBlock as t, createElementBlock as e, mergeProps as v, renderSlot as y, createCommentVNode as A, createElementVNode as o } from "vue";
const f = ["width", "height", "fill", "transform"], w = { key: 0 }, M = /* @__PURE__ */ o("path", { d: "M228,128a100,100,0,1,1-22.86-63.64,12,12,0,0,1-18.51,15.28A76,76,0,1,0,203.05,140H128a12,12,0,0,1,0-24h88A12,12,0,0,1,228,128Z" }, null, -1), k = [
  M
], Z = { key: 1 }, x = /* @__PURE__ */ o("path", {
  d: "M216,128a88,88,0,1,1-88-88A88,88,0,0,1,216,128Z",
  opacity: "0.2"
}, null, -1), H = /* @__PURE__ */ o("path", { d: "M224,128a96,96,0,1,1-21.95-61.09,8,8,0,1,1-12.33,10.18A80,80,0,1,0,207.6,136H128a8,8,0,0,1,0-16h88A8,8,0,0,1,224,128Z" }, null, -1), S = [
  x,
  H
], z = { key: 2 }, C = /* @__PURE__ */ o("path", { d: "M128,24A104,104,0,1,0,232,128,104,104,0,0,0,128,24Zm0,184A80,80,0,1,1,181.34,68.37a8,8,0,0,1-10.67,11.92A64,64,0,1,0,191.5,136H128a8,8,0,0,1,0-16h72a8,8,0,0,1,8,8A80.09,80.09,0,0,1,128,208Z" }, null, -1), B = [
  C
], N = { key: 3 }, b = /* @__PURE__ */ o("path", { d: "M222,128a94,94,0,1,1-21.49-59.82,6,6,0,1,1-9.25,7.64A82,82,0,1,0,209.78,134H128a6,6,0,0,1,0-12h88A6,6,0,0,1,222,128Z" }, null, -1), E = [
  b
], P = { key: 4 }, V = /* @__PURE__ */ o("path", { d: "M224,128a96,96,0,1,1-21.95-61.09,8,8,0,1,1-12.33,10.18A80,80,0,1,0,207.6,136H128a8,8,0,0,1,0-16h88A8,8,0,0,1,224,128Z" }, null, -1), W = [
  V
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M220,128a92,92,0,1,1-21-58.55,4,4,0,0,1-6.17,5.1A84,84,0,1,0,211.91,132H128a4,4,0,0,1,0-8h88A4,4,0,0,1,220,128Z" }, null, -1), G = [
  j
], L = {
  name: "PhGoogleLogo"
}, F = /* @__PURE__ */ m({
  ...L,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const n = d, c = i("weight", "regular"), h = i("size", "1em"), _ = i("color", "currentColor"), u = i("mirrored", !1), s = l(() => n.weight ?? c), r = l(() => n.size ?? h), p = l(() => n.color ?? _), g = l(() => n.mirrored !== void 0 ? n.mirrored ? "scale(-1, 1)" : void 0 : u ? "scale(-1, 1)" : void 0);
    return (a, q) => (t(), e("svg", v({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: r.value,
      height: r.value,
      fill: p.value,
      transform: g.value
    }, a.$attrs), [
      y(a.$slots, "default"),
      s.value === "bold" ? (t(), e("g", w, k)) : s.value === "duotone" ? (t(), e("g", Z, S)) : s.value === "fill" ? (t(), e("g", z, B)) : s.value === "light" ? (t(), e("g", N, E)) : s.value === "regular" ? (t(), e("g", P, W)) : s.value === "thin" ? (t(), e("g", $, G)) : A("", !0)
    ], 16, f));
  }
});
export {
  F as default
};
