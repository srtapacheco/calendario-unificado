import { defineComponent as g, inject as i, computed as r, openBlock as t, createElementBlock as e, mergeProps as v, renderSlot as y, createCommentVNode as A, createElementVNode as o } from "vue";
const f = ["width", "height", "fill", "transform"], H = { key: 0 }, Z = /* @__PURE__ */ o("path", { d: "M132,20A104.11,104.11,0,0,0,28,124v84.33A19.69,19.69,0,0,0,47.67,228H132a104,104,0,0,0,0-208Zm0,184H52V124a80,80,0,1,1,80,80Z" }, null, -1), w = [
  Z
], M = { key: 1 }, V = /* @__PURE__ */ o("path", {
  d: "M224,124h0a92,92,0,0,1-92,92H47.67A7.66,7.66,0,0,1,40,208.33V124a92,92,0,0,1,92-92h0A92,92,0,0,1,224,124Z",
  opacity: "0.2"
}, null, -1), k = /* @__PURE__ */ o("path", { d: "M132,24A100.11,100.11,0,0,0,32,124v84.33A15.69,15.69,0,0,0,47.67,224H132a100,100,0,0,0,0-200Zm0,184H48V124a84,84,0,1,1,84,84Z" }, null, -1), x = [
  V,
  k
], C = { key: 2 }, S = /* @__PURE__ */ o("path", { d: "M232,124A100.11,100.11,0,0,1,132,224H47.67A15.69,15.69,0,0,1,32,208.33V124a100,100,0,0,1,200,0Z" }, null, -1), z = [
  S
], B = { key: 3 }, N = /* @__PURE__ */ o("path", { d: "M132,26a98.11,98.11,0,0,0-98,98v84.33A13.68,13.68,0,0,0,47.67,222H132a98,98,0,0,0,0-196Zm0,184H47.67A1.67,1.67,0,0,1,46,208.33V124a86,86,0,1,1,86,86Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ o("path", { d: "M132,24A100.11,100.11,0,0,0,32,124v84.33A15.69,15.69,0,0,0,47.67,224H132a100,100,0,0,0,0-200Zm0,184H48V124a84,84,0,1,1,84,84Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M132,28a96.11,96.11,0,0,0-96,96v84.33A11.68,11.68,0,0,0,47.67,220H132a96,96,0,0,0,0-192Zm0,184H47.67A3.67,3.67,0,0,1,44,208.33V124a88,88,0,1,1,88,88Z" }, null, -1), T = [
  j
], q = {
  name: "PhChatTeardrop"
}, G = /* @__PURE__ */ g({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const n = d, c = i("weight", "regular"), h = i("size", "1em"), _ = i("color", "currentColor"), u = i("mirrored", !1), s = r(() => n.weight ?? c), a = r(() => n.size ?? h), p = r(() => n.color ?? _), m = r(() => n.mirrored !== void 0 ? n.mirrored ? "scale(-1, 1)" : void 0 : u ? "scale(-1, 1)" : void 0);
    return (l, D) => (t(), e("svg", v({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: a.value,
      height: a.value,
      fill: p.value,
      transform: m.value
    }, l.$attrs), [
      y(l.$slots, "default"),
      s.value === "bold" ? (t(), e("g", H, w)) : s.value === "duotone" ? (t(), e("g", M, x)) : s.value === "fill" ? (t(), e("g", C, z)) : s.value === "light" ? (t(), e("g", B, b)) : s.value === "regular" ? (t(), e("g", E, W)) : s.value === "thin" ? (t(), e("g", $, T)) : A("", !0)
    ], 16, f));
  }
});
export {
  G as default
};
