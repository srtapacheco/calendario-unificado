import { defineComponent as g, inject as n, computed as i, openBlock as t, createElementBlock as e, mergeProps as m, renderSlot as v, createCommentVNode as y, createElementVNode as o } from "vue";
const M = ["width", "height", "fill", "transform"], Z = { key: 0 }, f = /* @__PURE__ */ o("path", { d: "M228,160a12,12,0,0,1-12,12H40a12,12,0,0,1,0-24H216A12,12,0,0,1,228,160ZM40,108H216a12,12,0,0,0,0-24H40a12,12,0,0,0,0,24Z" }, null, -1), w = [
  f
], k = { key: 1 }, A = /* @__PURE__ */ o("path", {
  d: "M216,48V208a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208A8,8,0,0,1,216,48Z",
  opacity: "0.2"
}, null, -1), x = /* @__PURE__ */ o("path", { d: "M224,160a8,8,0,0,1-8,8H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,160ZM40,104H216a8,8,0,0,0,0-16H40a8,8,0,0,0,0,16Z" }, null, -1), S = [
  A,
  x
], V = { key: 2 }, z = /* @__PURE__ */ o("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM184,160H72a8,8,0,0,1,0-16H184a8,8,0,0,1,0,16Zm0-48H72a8,8,0,0,1,0-16H184a8,8,0,0,1,0,16Z" }, null, -1), C = [
  z
], B = { key: 3 }, E = /* @__PURE__ */ o("path", { d: "M222,160a6,6,0,0,1-6,6H40a6,6,0,0,1,0-12H216A6,6,0,0,1,222,160ZM40,102H216a6,6,0,0,0,0-12H40a6,6,0,0,0,0,12Z" }, null, -1), N = [
  E
], b = { key: 4 }, P = /* @__PURE__ */ o("path", { d: "M224,160a8,8,0,0,1-8,8H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,160ZM40,104H216a8,8,0,0,0,0-16H40a8,8,0,0,0,0,16Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M220,160a4,4,0,0,1-4,4H40a4,4,0,0,1,0-8H216A4,4,0,0,1,220,160ZM40,100H216a4,4,0,0,0,0-8H40a4,4,0,0,0,0,8Z" }, null, -1), q = [
  j
], D = {
  name: "PhEquals"
}, I = /* @__PURE__ */ g({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const a = d, c = n("weight", "regular"), _ = n("size", "1em"), h = n("color", "currentColor"), u = n("mirrored", !1), s = i(() => a.weight ?? c), l = i(() => a.size ?? _), p = i(() => a.color ?? h), H = i(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : u ? "scale(-1, 1)" : void 0);
    return (r, F) => (t(), e("svg", m({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: l.value,
      height: l.value,
      fill: p.value,
      transform: H.value
    }, r.$attrs), [
      v(r.$slots, "default"),
      s.value === "bold" ? (t(), e("g", Z, w)) : s.value === "duotone" ? (t(), e("g", k, S)) : s.value === "fill" ? (t(), e("g", V, C)) : s.value === "light" ? (t(), e("g", B, N)) : s.value === "regular" ? (t(), e("g", b, W)) : s.value === "thin" ? (t(), e("g", $, q)) : y("", !0)
    ], 16, M));
  }
});
export {
  I as default
};
