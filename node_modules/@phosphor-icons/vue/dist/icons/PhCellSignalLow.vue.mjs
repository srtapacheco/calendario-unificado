import { defineComponent as g, inject as a, computed as l, openBlock as t, createElementBlock as e, mergeProps as m, renderSlot as y, createCommentVNode as M, createElementVNode as o } from "vue";
const Z = ["width", "height", "fill", "transform"], f = { key: 0 }, w = /* @__PURE__ */ o("path", { d: "M92,152v48a12,12,0,0,1-24,0V152a12,12,0,0,1,24,0ZM40,180a12,12,0,0,0-12,12v8a12,12,0,0,0,24,0v-8A12,12,0,0,0,40,180Z" }, null, -1), V = [
  w
], k = { key: 1 }, A = /* @__PURE__ */ o("path", {
  d: "M80,140.7V208H32a8,8,0,0,1-5.66-13.66Z",
  opacity: "0.2"
}, null, -1), S = /* @__PURE__ */ o("path", { d: "M198.12,25.23a16,16,0,0,0-17.44,3.46l-160,160A16,16,0,0,0,32,216H192a16,16,0,0,0,16-16V40A15.94,15.94,0,0,0,198.12,25.23ZM72,160v40H32Zm120,40H88V144L192,40Z" }, null, -1), x = [
  A,
  S
], C = { key: 2 }, H = /* @__PURE__ */ o("path", { d: "M198.12,25.23a16,16,0,0,0-17.44,3.46l-160,160A16,16,0,0,0,32,216H192a16,16,0,0,0,16-16V40A15.94,15.94,0,0,0,198.12,25.23ZM192,200H88V144L192,40Z" }, null, -1), z = [
  H
], B = { key: 3 }, L = /* @__PURE__ */ o("path", { d: "M86,152v48a6,6,0,0,1-12,0V152a6,6,0,0,1,12,0ZM40,186a6,6,0,0,0-6,6v8a6,6,0,0,0,12,0v-8A6,6,0,0,0,40,186Z" }, null, -1), N = [
  L
], b = { key: 4 }, E = /* @__PURE__ */ o("path", { d: "M88,152v48a8,8,0,0,1-16,0V152a8,8,0,0,1,16,0ZM40,184a8,8,0,0,0-8,8v8a8,8,0,0,0,16,0v-8A8,8,0,0,0,40,184Z" }, null, -1), P = [
  E
], W = { key: 5 }, $ = /* @__PURE__ */ o("path", { d: "M84,152v48a4,4,0,0,1-8,0V152a4,4,0,0,1,8,0ZM40,188a4,4,0,0,0-4,4v8a4,4,0,0,0,8,0v-8A4,4,0,0,0,40,188Z" }, null, -1), j = [
  $
], q = {
  name: "PhCellSignalLow"
}, G = /* @__PURE__ */ g({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const n = d, c = a("weight", "regular"), _ = a("size", "1em"), h = a("color", "currentColor"), u = a("mirrored", !1), s = l(() => n.weight ?? c), i = l(() => n.size ?? _), v = l(() => n.color ?? h), p = l(() => n.mirrored !== void 0 ? n.mirrored ? "scale(-1, 1)" : void 0 : u ? "scale(-1, 1)" : void 0);
    return (r, D) => (t(), e("svg", m({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: i.value,
      height: i.value,
      fill: v.value,
      transform: p.value
    }, r.$attrs), [
      y(r.$slots, "default"),
      s.value === "bold" ? (t(), e("g", f, V)) : s.value === "duotone" ? (t(), e("g", k, x)) : s.value === "fill" ? (t(), e("g", C, z)) : s.value === "light" ? (t(), e("g", B, N)) : s.value === "regular" ? (t(), e("g", b, P)) : s.value === "thin" ? (t(), e("g", W, j)) : M("", !0)
    ], 16, Z));
  }
});
export {
  G as default
};
