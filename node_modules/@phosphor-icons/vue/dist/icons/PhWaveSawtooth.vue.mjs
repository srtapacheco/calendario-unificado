import { defineComponent as m, inject as n, computed as i, openBlock as t, createElementBlock as e, mergeProps as v, renderSlot as y, createCommentVNode as V, createElementVNode as o } from "vue";
const A = ["width", "height", "fill", "transform"], f = { key: 0 }, w = /* @__PURE__ */ o("path", { d: "M238.29,138.22l-104,64A12,12,0,0,1,116,192V85.47L30.29,138.22a12,12,0,0,1-12.58-20.44l104-64A12,12,0,0,1,140,64V170.53l85.71-52.75a12,12,0,1,1,12.58,20.44Z" }, null, -1), M = [
  w
], Z = { key: 1 }, k = /* @__PURE__ */ o("path", {
  d: "M128,64v64H24Zm104,64H128v64Z",
  opacity: "0.2"
}, null, -1), S = /* @__PURE__ */ o("path", { d: "M236.19,134.81l-104,64A8,8,0,0,1,120,192V78.32L28.19,134.81a8,8,0,0,1-8.38-13.62l104-64A8,8,0,0,1,136,64V177.68l91.81-56.49a8,8,0,0,1,8.38,13.62Z" }, null, -1), x = [
  k,
  S
], L = { key: 2 }, z = /* @__PURE__ */ o("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm-11.56,94.66-72,48A8,8,0,0,1,128,184a8,8,0,0,1-8-8V95L60.44,134.66a8,8,0,1,1-8.88-13.32l72-48A8,8,0,0,1,136,80v81.05l59.56-39.71a8,8,0,0,1,8.88,13.32Z" }, null, -1), C = [
  z
], B = { key: 3 }, H = /* @__PURE__ */ o("path", { d: "M235.14,133.11l-104,64A6,6,0,0,1,122,192V74.74L27.15,133.11a6,6,0,1,1-6.29-10.22l104-64A6,6,0,0,1,134,64V181.26l94.85-58.37a6,6,0,1,1,6.29,10.22Z" }, null, -1), N = [
  H
], W = { key: 4 }, b = /* @__PURE__ */ o("path", { d: "M236.19,134.81l-104,64A8,8,0,0,1,120,192V78.32L28.19,134.81a8,8,0,0,1-8.38-13.62l104-64A8,8,0,0,1,136,64V177.68l91.81-56.49a8,8,0,0,1,8.38,13.62Z" }, null, -1), E = [
  b
], P = { key: 5 }, $ = /* @__PURE__ */ o("path", { d: "M234.1,131.41l-104,64a4,4,0,0,1-2.1.59,4,4,0,0,1-4-4V71.16L26.1,131.41a4,4,0,0,1-4.2-6.82l104-64A4,4,0,0,1,132,64V184.84l97.9-60.25a4,4,0,1,1,4.2,6.82Z" }, null, -1), j = [
  $
], q = {
  name: "PhWaveSawtooth"
}, G = /* @__PURE__ */ m({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const s = d, c = n("weight", "regular"), _ = n("size", "1em"), h = n("color", "currentColor"), u = n("mirrored", !1), l = i(() => s.weight ?? c), a = i(() => s.size ?? _), p = i(() => s.color ?? h), g = i(() => s.mirrored !== void 0 ? s.mirrored ? "scale(-1, 1)" : void 0 : u ? "scale(-1, 1)" : void 0);
    return (r, D) => (t(), e("svg", v({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: a.value,
      height: a.value,
      fill: p.value,
      transform: g.value
    }, r.$attrs), [
      y(r.$slots, "default"),
      l.value === "bold" ? (t(), e("g", f, M)) : l.value === "duotone" ? (t(), e("g", Z, x)) : l.value === "fill" ? (t(), e("g", L, C)) : l.value === "light" ? (t(), e("g", B, N)) : l.value === "regular" ? (t(), e("g", W, E)) : l.value === "thin" ? (t(), e("g", P, j)) : V("", !0)
    ], 16, A));
  }
});
export {
  G as default
};
