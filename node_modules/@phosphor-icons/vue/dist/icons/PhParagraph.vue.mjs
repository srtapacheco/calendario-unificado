import { defineComponent as V, inject as n, computed as h, openBlock as t, createElementBlock as e, mergeProps as v, renderSlot as m, createCommentVNode as y, createElementVNode as o } from "vue";
const H = ["width", "height", "fill", "transform"], M = { key: 0 }, f = /* @__PURE__ */ o("path", { d: "M208,36H96a68,68,0,0,0,0,136h36v36a12,12,0,0,0,24,0V60h16V208a12,12,0,0,0,24,0V60h12a12,12,0,0,0,0-24ZM132,148H96a44,44,0,0,1,0-88h36Z" }, null, -1), Z = [
  f
], w = { key: 1 }, k = /* @__PURE__ */ o("path", {
  d: "M144,48V160H96A56,56,0,0,1,96,48Z",
  opacity: "0.2"
}, null, -1), x = /* @__PURE__ */ o("path", { d: "M208,40H96a64,64,0,0,0,0,128h40v40a8,8,0,0,0,16,0V56h24V208a8,8,0,0,0,16,0V56h16a8,8,0,0,0,0-16ZM136,152H96a48,48,0,0,1,0-96h40Z" }, null, -1), S = [
  k,
  x
], z = { key: 2 }, A = /* @__PURE__ */ o("path", { d: "M216,48a8,8,0,0,1-8,8H192V208a8,8,0,0,1-16,0V56H152V208a8,8,0,0,1-16,0V168H96A64,64,0,0,1,96,40H208A8,8,0,0,1,216,48Z" }, null, -1), C = [
  A
], B = { key: 3 }, N = /* @__PURE__ */ o("path", { d: "M208,42H96a62,62,0,0,0,0,124h42v42a6,6,0,0,0,12,0V54h28V208a6,6,0,0,0,12,0V54h18a6,6,0,0,0,0-12ZM138,154H96A50,50,0,0,1,96,54h42Z" }, null, -1), P = [
  N
], b = { key: 4 }, E = /* @__PURE__ */ o("path", { d: "M208,40H96a64,64,0,0,0,0,128h40v40a8,8,0,0,0,16,0V56h24V208a8,8,0,0,0,16,0V56h16a8,8,0,0,0,0-16ZM136,152H96a48,48,0,0,1,0-96h40Z" }, null, -1), W = [
  E
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M208,44H96a60,60,0,0,0,0,120h44v44a4,4,0,0,0,8,0V52h32V208a4,4,0,0,0,8,0V52h20a4,4,0,0,0,0-8ZM140,156H96A52,52,0,0,1,96,52h44Z" }, null, -1), q = [
  j
], D = {
  name: "PhParagraph"
}, I = /* @__PURE__ */ V({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const a = l, d = n("weight", "regular"), c = n("size", "1em"), _ = n("color", "currentColor"), u = n("mirrored", !1), s = h(() => a.weight ?? d), i = h(() => a.size ?? c), p = h(() => a.color ?? _), g = h(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : u ? "scale(-1, 1)" : void 0);
    return (r, F) => (t(), e("svg", v({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: i.value,
      height: i.value,
      fill: p.value,
      transform: g.value
    }, r.$attrs), [
      m(r.$slots, "default"),
      s.value === "bold" ? (t(), e("g", M, Z)) : s.value === "duotone" ? (t(), e("g", w, S)) : s.value === "fill" ? (t(), e("g", z, C)) : s.value === "light" ? (t(), e("g", B, P)) : s.value === "regular" ? (t(), e("g", b, W)) : s.value === "thin" ? (t(), e("g", $, q)) : y("", !0)
    ], 16, H));
  }
});
export {
  I as default
};
