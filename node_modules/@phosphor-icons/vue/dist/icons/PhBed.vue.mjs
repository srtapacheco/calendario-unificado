import { defineComponent as p, inject as i, computed as a, openBlock as t, createElementBlock as e, mergeProps as H, renderSlot as m, createCommentVNode as g, createElementVNode as o } from "vue";
const Z = ["width", "height", "fill", "transform"], y = { key: 0 }, M = /* @__PURE__ */ o("path", { d: "M208,68H28V48A12,12,0,0,0,4,48V208a12,12,0,0,0,24,0V180H228v28a12,12,0,0,0,24,0V112A44.05,44.05,0,0,0,208,68ZM92,156H28V92H92Zm136,0H116V92h92a20,20,0,0,1,20,20Z" }, null, -1), f = [
  M
], A = { key: 1 }, w = /* @__PURE__ */ o("path", {
  d: "M240,112v56H104V80H208A32,32,0,0,1,240,112Z",
  opacity: "0.2"
}, null, -1), k = /* @__PURE__ */ o("path", { d: "M208,72H24V48A8,8,0,0,0,8,48V208a8,8,0,0,0,16,0V176H232v32a8,8,0,0,0,16,0V112A40,40,0,0,0,208,72ZM24,88H96v72H24Zm88,72V88h96a24,24,0,0,1,24,24v48Z" }, null, -1), x = [
  w,
  k
], S = { key: 2 }, z = /* @__PURE__ */ o("path", { d: "M208,72H24V48A8,8,0,0,0,8,48V208a8,8,0,0,0,16,0V176H232v32a8,8,0,0,0,16,0V112A40,40,0,0,0,208,72ZM24,88H96v72H24Z" }, null, -1), B = [
  z
], C = { key: 3 }, N = /* @__PURE__ */ o("path", { d: "M208,74H22V48a6,6,0,0,0-12,0V208a6,6,0,0,0,12,0V174H234v34a6,6,0,0,0,12,0V112A38,38,0,0,0,208,74ZM22,86H98v76H22Zm88,76V86h98a26,26,0,0,1,26,26v50Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ o("path", { d: "M208,72H24V48A8,8,0,0,0,8,48V208a8,8,0,0,0,16,0V176H232v32a8,8,0,0,0,16,0V112A40,40,0,0,0,208,72ZM24,88H96v72H24Zm88,72V88h96a24,24,0,0,1,24,24v48Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M208,76H20V48a4,4,0,0,0-8,0V208a4,4,0,0,0,8,0V172H236v36a4,4,0,0,0,8,0V112A36,36,0,0,0,208,76ZM20,84h80v80H20Zm88,80V84H208a28,28,0,0,1,28,28v52Z" }, null, -1), q = [
  j
], D = {
  name: "PhBed"
}, I = /* @__PURE__ */ p({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const n = d, c = i("weight", "regular"), h = i("size", "1em"), _ = i("color", "currentColor"), V = i("mirrored", !1), s = a(() => n.weight ?? c), l = a(() => n.size ?? h), v = a(() => n.color ?? _), u = a(() => n.mirrored !== void 0 ? n.mirrored ? "scale(-1, 1)" : void 0 : V ? "scale(-1, 1)" : void 0);
    return (r, F) => (t(), e("svg", H({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: l.value,
      height: l.value,
      fill: v.value,
      transform: u.value
    }, r.$attrs), [
      m(r.$slots, "default"),
      s.value === "bold" ? (t(), e("g", y, f)) : s.value === "duotone" ? (t(), e("g", A, x)) : s.value === "fill" ? (t(), e("g", S, B)) : s.value === "light" ? (t(), e("g", C, b)) : s.value === "regular" ? (t(), e("g", E, W)) : s.value === "thin" ? (t(), e("g", $, q)) : g("", !0)
    ], 16, Z));
  }
});
export {
  I as default
};
